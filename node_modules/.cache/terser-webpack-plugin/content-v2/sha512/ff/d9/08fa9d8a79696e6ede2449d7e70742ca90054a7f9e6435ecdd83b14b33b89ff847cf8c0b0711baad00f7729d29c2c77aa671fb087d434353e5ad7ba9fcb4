{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{404:function(a,e,t){a.exports=t.p+\"assets/img/docker-bridge.aec5bc07.png\"},405:function(a,e,t){a.exports=t.p+\"assets/img/docker-container.f6c4da9d.png\"},406:function(a,e,t){a.exports=t.p+\"assets/img/docker-host.c2358335.png\"},414:function(a,e,t){\"use strict\";t.r(e);var s=t(2),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"网络模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络模式\"}},[a._v(\"#\")]),a._v(\" 网络模式\")]),a._v(\" \"),e(\"p\",[a._v(\"Docker具有四种网络模式：\")]),a._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[a._v(\"host\")]),a._v(\"：使容器和宿主机共享网络命名空间；\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"container\")]),a._v(\"：使容器和其他指定的容器共享网络命名空间；\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"none\")]),a._v(\"：容器具有独立的网络命名空间，但是没有进行任何网络配置：如分配IP、网桥配置等；\")]),a._v(\" \"),e(\"li\",[e(\"code\",[a._v(\"bridge\")]),a._v(\"：默认模式；\")])]),a._v(\" \"),e(\"p\",[a._v(\"Docker的网络可以通过下面的命令查看，默认安装完成后提供了三种网络：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"docker\")]),a._v(\" network \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"ls\")]),a._v(\"\\n\\nNETWORK ID          NAME                DRIVER              SCOPE\\ncd97bb997b84        bridge              bridge              \"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[a._v(\"local\")]),a._v(\"\\n0a04824fc9b6        \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"host\")]),a._v(\"                \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"host\")]),a._v(\"                \"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[a._v(\"local\")]),a._v(\"\\n4dcb8fbdb599        none                null                \"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[a._v(\"local\")]),a._v(\"\\n\")])])]),e(\"h2\",{attrs:{id:\"bridge模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bridge模式\"}},[a._v(\"#\")]),a._v(\" bridge模式\")]),a._v(\" \"),e(\"p\",[a._v(\"docker启动时会在机器上创建一个名为\"),e(\"code\",[a._v(\"docker0\")]),a._v(\"的虚拟网桥，在此机器上启动的容器都会默认连接到这个网桥上并由\"),e(\"code\",[a._v(\"docker0\")]),a._v(\"从其分子网中分配一个IP给容器使用，\"),e(\"code\",[a._v(\"docker0\")]),a._v(\"的IP将作为容器IP的网关；在主机上创建一对虚拟网卡\"),e(\"code\",[a._v(\"veth pair\")]),a._v(\"设备，Docker将\"),e(\"code\",[a._v(\"veth pair\")]),a._v(\"设备的一端放在新创建的容器中，并命名为\"),e(\"code\",[a._v(\"eth0\")]),a._v(\"（容器的网卡），另一端放在主机中，以\"),e(\"code\",[a._v(\"vethxxx\")]),a._v(\"这样类似的名字命名，并将这个网络设备加入到\"),e(\"code\",[a._v(\"docker0\")]),a._v(\"网桥中。可以通过\"),e(\"code\",[a._v(\"brctl show\")]),a._v(\" 命令查看。\")]),a._v(\" \"),e(\"blockquote\",[e(\"p\",[e(\"code\",[a._v(\"docker0\")]),a._v(\"网桥的工作方式类似于物理交换机，这样所有的docker容器都通过\"),e(\"code\",[a._v(\"docker0\")]),a._v(\"这个虚拟的交换机连接在一个二层网络中\")])]),a._v(\" \"),e(\"p\",[a._v(\"bridge模式是docker的 \"),e(\"strong\",[a._v(\"默认网络模式\")]),a._v(\"，即启动容器时不用指定\"),e(\"code\",[a._v(\"--network\")]),a._v(\"参数。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:t(404),alt:\"bridge模式示意图\"}})]),a._v(\" \"),e(\"p\",[a._v(\"因为docker网桥是虚拟的，所以外部无法直接通过容器IP访问到容器中的服务，外部访问的话需要在容器启动时通过\"),e(\"code\",[a._v(\"-p\")]),a._v(\"指定端口映射的方式访问。\")]),a._v(\" \"),e(\"blockquote\",[e(\"p\",[a._v(\"当容器需要使用\"),e(\"code\",[a._v(\"docker run -p\")]),a._v(\"对外映射端口时，docker实际是在iptables中做了\"),e(\"code\",[a._v(\"DNAT\")]),a._v(\"规则，实现端口转发功能。可以使用 \"),e(\"code\",[a._v(\"iptables -t nat -vnL\")]),a._v(\"查看\")])]),a._v(\" \"),e(\"h2\",{attrs:{id:\"container模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#container模式\"}},[a._v(\"#\")]),a._v(\" container模式\")]),a._v(\" \"),e(\"p\",[a._v(\"这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。\")]),a._v(\" \"),e(\"p\",[a._v(\"新创建的容器不会创建自己的网卡及IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过\"),e(\"code\",[a._v(\"lo\")]),a._v(\"网卡设备通信。\")]),a._v(\" \"),e(\"p\",[a._v(\"这种模式可以在创建容器时通过\"),e(\"code\",[a._v(\"--network container:NAME_or_ID\")]),a._v(\"来指定和哪个容器互联。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:t(405),alt:\"container模式示意图\"}})]),a._v(\" \"),e(\"h2\",{attrs:{id:\"host模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#host模式\"}},[a._v(\"#\")]),a._v(\" host模式\")]),a._v(\" \"),e(\"p\",[a._v(\"使用host模式的容器将和宿主机共用一个\"),e(\"code\",[a._v(\"Network Namespace\")]),a._v(\"，容器将不会虚拟出自己的网卡和IP等，而是使用宿主机的IP和端口。但是容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。\")]),a._v(\" \"),e(\"p\",[a._v(\"使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是宿主机上已经使用的端口就不能再用了，网络的隔离性不好。\")]),a._v(\" \"),e(\"p\",[a._v(\"这种模式可以在创建容器时通过\"),e(\"code\",[a._v(\"--network host\")]),a._v(\"来启用。\")]),a._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:t(406),alt:\"host模式示意图\"}})]),a._v(\" \"),e(\"h2\",{attrs:{id:\"none模式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#none模式\"}},[a._v(\"#\")]),a._v(\" none模式\")]),a._v(\" \"),e(\"p\",[a._v(\"使用none模式的容器拥有自己的\"),e(\"code\",[a._v(\"Network Namespace\")]),a._v(\"，但是并不为容器进行任何网络配置。也就是说这个容器没有网卡、IP、路由等信息。需要我们自己为容器添加网卡、配置IP等。\")]),a._v(\" \"),e(\"p\",[a._v(\"这种网络模式下容器只有\"),e(\"code\",[a._v(\"lo回环网络\")]),a._v(\"，没有其他网卡。none模式可以在容器创建时通过\"),e(\"code\",[a._v(\"--network none\")]),a._v(\"，来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。\")]),a._v(\" \"),e(\"h2\",{attrs:{id:\"docker网络配置\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker网络配置\"}},[a._v(\"#\")]),a._v(\" docker网络配置\")]),a._v(\" \"),e(\"h3\",{attrs:{id:\"自定义docker0网段\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定义docker0网段\"}},[a._v(\"#\")]),a._v(\" 自定义docker0网段\")]),a._v(\" \"),e(\"p\",[a._v(\"可以在docker的配置文件\"),e(\"code\",[a._v(\"/etc/daemon.json\")]),a._v(\"中增加下面的配置来指定docker0使用的网段：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-json extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-json\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n    \"),e(\"span\",{pre:!0,attrs:{class:\"token property\"}},[a._v('\"bip\"')]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"192.168.1.5/24\"')]),a._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),e(\"h3\",{attrs:{id:\"创建自定义的网络\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建自定义的网络\"}},[a._v(\"#\")]),a._v(\" 创建自定义的网络\")]),a._v(\" \"),e(\"p\",[a._v(\"可以通过如下的命令基于bridge模式创建一个网络：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"docker\")]),a._v(\" network create my_network \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"-d\")]),a._v(\" bridge\\n\")])])]),e(\"p\",[a._v(\"也可以创建一个额外的网桥以区别于docker0\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"docker\")]),a._v(\" network create \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"-d\")]),a._v(\" bridge \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"--subnet\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"172.16.2.0/24\"')]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"--gateway\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"172.16.2.1\"')]),a._v(\" my_bridge\\n\")])])]),e(\"p\",[a._v(\"这个时候创建容器就可以使用自定义的网桥了：\")]),a._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"docker\")]),a._v(\" run \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"-it\")]),a._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"--name\")]),a._v(\" b1 \"),e(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[a._v(\"--network\")]),a._v(\" my_bridge busybox\\n\")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}